// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  phone        String?
  password     String?
  role         String   @default("user") // Legacy field - keeping for backward compatibility
  recurring    Boolean  @default(false)
  active       Boolean  @default(true)
  profilePic   String?  // URL to profile picture
  createdBy    String?  // ID of the admin who created this user
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  registrations Registration[]
  auditLogs    AuditLog[]
  
  // Multi-role support
  userRoles    UserRole[]
  
  // Relations
  createdByUser User? @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers  User[] @relation("UserCreatedBy")
  assignedRoles UserRole[] @relation("RoleAssignedBy")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique // "super_admin", "admin", "checkin_user", "reporting"
  displayName String     // "Super Admin", "Admin", "CheckIn User", "Reporting"
  description String?    // Description of what this role can do
  permissions String[]   // Array of permission strings
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  userRoles   UserRole[]
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedBy String?  // ID of the admin who assigned this role
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("RoleAssignedBy", fields: [assignedBy], references: [id])
  
  @@unique([userId, roleId])
}

model Timeslot {
  id        String   @id @default(cuid())
  date      DateTime
  start     String
  end       String?
  capacity  Int      @default(1)
  remaining Int      @default(1)
  published Boolean  @default(false)
  archived  Boolean  @default(false)
  archivedBy String?  // "system" for auto-archived, user ID for manual archiving
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Auto-publishing fields
  autoPublishEnabled Boolean?  @default(false)
  autoPublishType    String?    // "scheduled" or "hours_before"
  autoPublishDateTime DateTime? // For scheduled publishing
  autoPublishHoursBefore Int?    // For hours before slot time
  autoPublished      Boolean   @default(false) // Track if already auto-published
  
  registrations Registration[]
}

model Registration {
  id          String   @id @default(cuid())
  timeslot    Timeslot @relation(fields: [timeslotId], references: [id])
  timeslotId  String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  fullName    String
  email       String
  phone       String
  createdAt   DateTime @default(now())
  checkedIn   Boolean  @default(false)
  method      String?
  partySize   Int      @default(1)
  actualCheckInCount Int? // Actual number of people who checked in
}

model OrganizationConfig {
  id                String   @id @default(cuid())
  organizationName  String   @default("DarshanFlow")
  logo              String?
  primaryColor      String   @default("#4F46E5")
  secondaryColor    String   @default("#10B981")
  accentColor       String   @default("#F59E0B")
  backgroundColor   String   @default("#F9FAFB")
  textColor         String   @default("#111827")
  timezone          String   @default("America/Chicago")
  emailWhitelist    String?
  allowUserRegistration Boolean @default(true)
  maxAttendees      Int      @default(5) // Maximum number of attendees per booking
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // "CREATE_ADMIN", "DEACTIVATE_ADMIN", "ACTIVATE_ADMIN", "UPDATE_ADMIN"
  details   String   // JSON string with action details
  performedBy String   // ID of the admin who performed the action
  performedOn String?  // ID of the user who was affected (if applicable)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [performedBy], references: [id])
}

